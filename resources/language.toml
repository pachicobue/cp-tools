#--------------------------------------------------------------------------------
# 言語毎の コンパイル/実行 方法定義
# （*付きフィールドは必須。外部スクリプトをcommand指定する場合は絶対パスを指定すること）
#
# - *name
#   言語名（`enum Language` のフィールド名に対応）
# - *extensions
#   拡張子候補（`guess_language` に使用）
# - [[build]]
#   ビルド時コマンド定義（*付きサブフィールドがビルドに必須）
#   ${src_path}から${bin_path}を生成する
#   - *command
#   - *args
#   - debug_args
#   - release_args
# - [[execute]] 
#   実行時コマンド定義（*付きサブフィールドが実行に必須）
#   ${bin_path}を実行するコマンド
#   - *command
#   - *args
# - [[expand]]
#   ファイル展開用コマンド定義（*付きサブフィールドが展開に必須）
#   ${src_path}を展開して標準出力に吐くコマンド
#   - *command
#   - *args
#
#--------------------------------------------------------------------------------
# 使用可能な変数名
#
# - ${src_path}: ソースファイルパス
#   `/home/sho/programming/main.cpp`
# - ${bin_path}: 実行ファイルパス
#   `/home/sho/programming/main.exe`
# - ${bundled_path}: 展開先ファイルパス
#   `/home/sho/.local/share/cpt/bundled.cpp`
# - ${tempdir}: 一時ディレクトリパス(一連のコマンドが終了したら削除される) 
#   `/tmp/cpt-XXDSOI`
#
# 使用可能な定数名
#
# - ${tool_workdir}: crate全体のWorkspaceディレクトリ（`resources` 以下はここにコピーされる）
#   `/home/sho/.local/share/cpt/`
#
#--------------------------------------------------------------------------------

[[language]]
name = 'cpp'
extensions = ['cpp']
[[language.build]]
command = 'clang++'
args = [
  '-I',
  '/home/sho/ghq/github.com/pachicobue/algolib/src',
  '-I',
  '/home/sho/ghq/github.com/atcoder/ac-library',
  '-D',
  'HOGEPACHI',
  '-std=gnu++20',
  '-Wall',
  '-Wextra',
  '${src_path}',
  '-o',
  '${bin_path}',
]
debug_args = ['-g3', '-O0', '-fsanitize=undefined,address']
release_args = ['-O2']
[[language.exec]]
command = '${bin_path}'
args = []
[[language.expand]]
command = 'sh'
args = [
  '${tool_workdir}/cpp/create_dummy_headers.sh',
  '/usr/include/c++/14.2.1',
  '${tool_workdir}/cpp/dummy_headers',
]
[[language.expand]]
command = 'clang++'
args = [
  '-E',
  '-P',
  '-nostdinc',
  '-nostdinc++',
  '-I',
  '/home/sho/ghq/github.com/pachicobue/algolib/src',
  '-I',
  '/home/sho/ghq/github.com/atcoder/ac-library',
  '-I',
  '${tool_workdir}/cpp/dummy_headers',
  '${src_path}',
  '-o',
  '${tempdir}/pp.cpp',
]
[[language.expand]]
command = 'awk'
args = [
  '''
  BEGIN { lines[NR]="" }
  {
    if ($0 ~ /#pragma INCLUDE/) {
      print gensub(/#pragma INCLUDE<(.*)>/, "#include <\\1>", "g") > "${bundled_path}"
    } else {
      num = length(lines); lines[num] = $0
    } 
  }
  END {
    for (i = 0; i < length(lines); i++) {
      print lines[i] > "${bundled_path}"
    }
  }
  ''',
  '${tempdir}/pp.cpp',
]
[[language.expand]]
command = 'clang-format'
args = [
  '${bundled_path}',
  '--style=file:${tool_workdir}/cpp/.clang-format',
  '-i',
]
